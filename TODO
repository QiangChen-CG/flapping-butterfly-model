To-do:
- Overall:
    - Move functions and modules around to create clean repository once
    structure is more defined
    - Unit tests?
    - Port code calculating equivalent wing and building 3D model for
    animations
    - Error handling -> pythonic way to handle errors and enforce proper
    arguments?
    - Once GUI -> enforce variable values -> with GUI or within classes?
        - Within classes would be more modular I think
    - Creation of Butterfly object with initial data is hacked together.  Flesh
     out later, for now just create to test.  Should x, y_le, y_te be in a dict
      or array?
     - Subfolder for data files(e.g. treeNymph.pkl)
     - In documentation, ensure coordinates used(x, y, etc) are clearly
     defined/explained, as they change between frames.
     -Centroid or center-of-mass?
     -Currently one wing with symmetry - perhaps make 'symmetry' some sort of
     input so can easily switch later?
     -What should be a static method and what should be a function defined
     outside class?
     - Wing angles -> correction rotate? (Negative vs. positive for some
     angles?)
     - Limit docstring and comment lines to 72 characters(all lines set at 79
     currently
     - In documentation, make sure parameters/variables/outputs etc are
     properly identified as correct type(e.g. as a list or array)
     - In clean-up/refactor, think about the scope of variables used(e.g. what
     should be defined locally only within functions, and what should be
     "saved" by defining as a class attribute)

- Additions(additional features vs. things to clean up):
     - Add "wind".  Should be simple addition of velocity vector.

- Questions for people who know better than I do:
    - Static methods for functions that are only used within the class

Notes & Lessons(potential writeups):
- In old code, the span, chord, and upper surface vectors were rotated for
every element at each time step.  Now just rotate them once at each time step,
as those vectors are the same for every wing element(wing is assumed flat and
rigid).  Should reduce runtime.
- Determining aero upper surface and angle of attack based on dot products of
chord and upper surface vectors w.r.t. the chord plane velocity vector